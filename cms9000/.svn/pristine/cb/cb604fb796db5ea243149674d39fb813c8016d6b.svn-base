package com.teamway.cms.webcontroller;

import java.util.List;

import org.apache.log4j.Logger;
import org.fastquery.page.Page;
import org.fastquery.page.Pageable;
import org.fastquery.page.PageableImpl;
import org.fastquery.service.FQuery;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.teamway.cms.dao.RegionInfoDBService;
import com.teamway.cms.dao.ServerDBService;
import com.teamway.cms.dao.UserDBService;
import com.teamway.cms.dbentity.Cms_config_userEntity;
import com.teamway.cms.dbentity.Cms_res_region_infoEntity;
import com.teamway.cms.dbentity.Cms_res_server_infoEntity;
import com.teamway.cms.model.DataGridModel;
import com.teamway.cms.model.ResultMessageModel;
import com.teamway.cms.model.ZTreeNodeModel;
import com.teamway.cms.pgcleint.ReturnVector;
import com.teamway.cms.pgserver.PgSendQueue;
import com.teamway.cms.pgserver.TaskBean;
import com.teamway.cms.pgutils.PG;
import com.teamway.cms.pgutils.PGPojo;
import com.teamway.cms.pgutils.PGUtil;

@Controller

public class PublicCtl {
	protected Logger log = Logger.getLogger(PublicCtl.class);
	@RequestMapping("/index")
	public String index(){
		return "index";
	}

	@RequestMapping("/region")
	public String region(){
		return "region";
	}
	
	@RequestMapping("/device")
	public String device(){
		return "device";
	}
	
	@ResponseBody
	@RequestMapping("/region_tree")
	public List<Cms_res_region_infoEntity> region_tree(){
		RegionInfoDBService DBService = FQuery.getRepository(RegionInfoDBService.class);
		List<Cms_res_region_infoEntity> list = DBService.findAll();
		for(Cms_res_region_infoEntity item : list){
			//item.setOpen(true);
		}
		System.out.println("list ="+list.size());
		return list;
	}



	@ResponseBody
	@RequestMapping("/region_add")
	public ResultMessageModel region_add(int id,String name,String remark){
		RegionInfoDBService DBService = FQuery.getRepository(RegionInfoDBService.class);
		if(DBService.add(id,name,remark)){
			return new ResultMessageModel();
		}else{
			return new ResultMessageModel(-1,"error");
		}
	}	

	@ResponseBody
	@RequestMapping("/region_find_by_id")
	public Cms_res_region_infoEntity region_find_by_id(int id){
		RegionInfoDBService DBService = FQuery.getRepository(RegionInfoDBService.class);
		return DBService.findById(id);
	}	
	@ResponseBody
	@RequestMapping("/region_del_by_id")
	public ResultMessageModel region_del_by_id(int id){
		RegionInfoDBService DBService = FQuery.getRepository(RegionInfoDBService.class);

		region_del(DBService,(long)id);


		return new ResultMessageModel();

	}	

	public boolean region_del(RegionInfoDBService DBService ,Long id){

		List<Cms_res_region_infoEntity> list =  DBService.findByPid(id);
		for(Cms_res_region_infoEntity item : list){
			region_del(DBService,item.getId());
		}
		DBService.deleteById( new Long(id).intValue());
		return true;
	}


	@ResponseBody
	@RequestMapping("/region_update")
	public ResultMessageModel region_update(int id,String name,String remark){
		RegionInfoDBService DBService = FQuery.getRepository(RegionInfoDBService.class);

		if(DBService.region_update(name,remark,id)){
			return new ResultMessageModel();
		}else{
			return new ResultMessageModel(-1,"error");
		}
	}

	@ResponseBody
	@RequestMapping("/connect_test")
	public String connectTest(){

		System.out.println("connect_test");
		PGPojo pg = PGUtil.newInstancePGObject(PG.GET_RPUSYS_CFG_REQ,0,1, new byte[]{},  new Object[]{});
		TaskBean bean = new TaskBean("192.168.12.201:9000",pg);
		try {
			PgSendQueue.getInstance().put(bean );
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


		try {
			TaskBean obj = ReturnVector.getInstance().check(bean, 1000);
			if(obj != null){
				System.out.println("返回对象="+obj.getPg().toString());
			}


		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return "connect_test ok";
	}

	@ResponseBody
	@RequestMapping("/getList")
	public DataGridModel getList(){

		Pageable pageable = new PageableImpl(1, 30);
		ServerDBService DBService = FQuery.getRepository(ServerDBService.class);
		Page<Cms_res_server_infoEntity> page = DBService.findByType(1,pageable);

		DataGridModel model = new DataGridModel();
		model.setRows(page.getContent());
		model.setTotal(page.getTotalElements());

		return model;
	}

	@ResponseBody
	@RequestMapping("/getDeciveList")
	public DataGridModel getDeciveList(){

		Pageable pageable = new PageableImpl(1, 30);
		ServerDBService DBService = FQuery.getRepository(ServerDBService.class);
		Page<Cms_res_server_infoEntity> page = DBService.findByType(1,pageable);

		DataGridModel model = new DataGridModel();
		model.setRows(page.getContent());
		model.setTotal(page.getTotalElements());

		return model;
	}
	
	


}
