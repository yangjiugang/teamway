/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.cassandra.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-11-10")
public class EndpointDetails implements org.apache.thrift.TBase<EndpointDetails, EndpointDetails._Fields>, java.io.Serializable, Cloneable, Comparable<EndpointDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EndpointDetails");

  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATACENTER_FIELD_DESC = new org.apache.thrift.protocol.TField("datacenter", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RACK_FIELD_DESC = new org.apache.thrift.protocol.TField("rack", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EndpointDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EndpointDetailsTupleSchemeFactory();

  public java.lang.String host; // required
  public java.lang.String datacenter; // required
  public java.lang.String rack; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST((short)1, "host"),
    DATACENTER((short)2, "datacenter"),
    RACK((short)3, "rack");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST
          return HOST;
        case 2: // DATACENTER
          return DATACENTER;
        case 3: // RACK
          return RACK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.RACK};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATACENTER, new org.apache.thrift.meta_data.FieldMetaData("datacenter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RACK, new org.apache.thrift.meta_data.FieldMetaData("rack", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EndpointDetails.class, metaDataMap);
  }

  public EndpointDetails() {
  }

  public EndpointDetails(
    java.lang.String host,
    java.lang.String datacenter)
  {
    this();
    this.host = host;
    this.datacenter = datacenter;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EndpointDetails(EndpointDetails other) {
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetDatacenter()) {
      this.datacenter = other.datacenter;
    }
    if (other.isSetRack()) {
      this.rack = other.rack;
    }
  }

  public EndpointDetails deepCopy() {
    return new EndpointDetails(this);
  }

  @Override
  public void clear() {
    this.host = null;
    this.datacenter = null;
    this.rack = null;
  }

  public java.lang.String getHost() {
    return this.host;
  }

  public EndpointDetails setHost(java.lang.String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public java.lang.String getDatacenter() {
    return this.datacenter;
  }

  public EndpointDetails setDatacenter(java.lang.String datacenter) {
    this.datacenter = datacenter;
    return this;
  }

  public void unsetDatacenter() {
    this.datacenter = null;
  }

  /** Returns true if field datacenter is set (has been assigned a value) and false otherwise */
  public boolean isSetDatacenter() {
    return this.datacenter != null;
  }

  public void setDatacenterIsSet(boolean value) {
    if (!value) {
      this.datacenter = null;
    }
  }

  public java.lang.String getRack() {
    return this.rack;
  }

  public EndpointDetails setRack(java.lang.String rack) {
    this.rack = rack;
    return this;
  }

  public void unsetRack() {
    this.rack = null;
  }

  /** Returns true if field rack is set (has been assigned a value) and false otherwise */
  public boolean isSetRack() {
    return this.rack != null;
  }

  public void setRackIsSet(boolean value) {
    if (!value) {
      this.rack = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((java.lang.String)value);
      }
      break;

    case DATACENTER:
      if (value == null) {
        unsetDatacenter();
      } else {
        setDatacenter((java.lang.String)value);
      }
      break;

    case RACK:
      if (value == null) {
        unsetRack();
      } else {
        setRack((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST:
      return getHost();

    case DATACENTER:
      return getDatacenter();

    case RACK:
      return getRack();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HOST:
      return isSetHost();
    case DATACENTER:
      return isSetDatacenter();
    case RACK:
      return isSetRack();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof EndpointDetails)
      return this.equals((EndpointDetails)that);
    return false;
  }

  public boolean equals(EndpointDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_datacenter = true && this.isSetDatacenter();
    boolean that_present_datacenter = true && that.isSetDatacenter();
    if (this_present_datacenter || that_present_datacenter) {
      if (!(this_present_datacenter && that_present_datacenter))
        return false;
      if (!this.datacenter.equals(that.datacenter))
        return false;
    }

    boolean this_present_rack = true && this.isSetRack();
    boolean that_present_rack = true && that.isSetRack();
    if (this_present_rack || that_present_rack) {
      if (!(this_present_rack && that_present_rack))
        return false;
      if (!this.rack.equals(that.rack))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
    if (isSetHost())
      hashCode = hashCode * 8191 + host.hashCode();

    hashCode = hashCode * 8191 + ((isSetDatacenter()) ? 131071 : 524287);
    if (isSetDatacenter())
      hashCode = hashCode * 8191 + datacenter.hashCode();

    hashCode = hashCode * 8191 + ((isSetRack()) ? 131071 : 524287);
    if (isSetRack())
      hashCode = hashCode * 8191 + rack.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EndpointDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDatacenter()).compareTo(other.isSetDatacenter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatacenter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datacenter, other.datacenter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRack()).compareTo(other.isSetRack());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRack()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rack, other.rack);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EndpointDetails(");
    boolean first = true;

    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datacenter:");
    if (this.datacenter == null) {
      sb.append("null");
    } else {
      sb.append(this.datacenter);
    }
    first = false;
    if (isSetRack()) {
      if (!first) sb.append(", ");
      sb.append("rack:");
      if (this.rack == null) {
        sb.append("null");
      } else {
        sb.append(this.rack);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EndpointDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EndpointDetailsStandardScheme getScheme() {
      return new EndpointDetailsStandardScheme();
    }
  }

  private static class EndpointDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<EndpointDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EndpointDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATACENTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.datacenter = iprot.readString();
              struct.setDatacenterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rack = iprot.readString();
              struct.setRackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EndpointDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      if (struct.datacenter != null) {
        oprot.writeFieldBegin(DATACENTER_FIELD_DESC);
        oprot.writeString(struct.datacenter);
        oprot.writeFieldEnd();
      }
      if (struct.rack != null) {
        if (struct.isSetRack()) {
          oprot.writeFieldBegin(RACK_FIELD_DESC);
          oprot.writeString(struct.rack);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EndpointDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EndpointDetailsTupleScheme getScheme() {
      return new EndpointDetailsTupleScheme();
    }
  }

  private static class EndpointDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<EndpointDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EndpointDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHost()) {
        optionals.set(0);
      }
      if (struct.isSetDatacenter()) {
        optionals.set(1);
      }
      if (struct.isSetRack()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetDatacenter()) {
        oprot.writeString(struct.datacenter);
      }
      if (struct.isSetRack()) {
        oprot.writeString(struct.rack);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EndpointDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(1)) {
        struct.datacenter = iprot.readString();
        struct.setDatacenterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rack = iprot.readString();
        struct.setRackIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

